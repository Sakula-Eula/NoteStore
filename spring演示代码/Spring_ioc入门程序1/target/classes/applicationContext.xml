<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--创建spring控制资源-->
    <bean id="home" scope="prototype" class="com.homeimpl"></bean>
    <!--配置dao层的bean-->
    <bean id="accountDao" class="Dao.impl.accountImpl">
        <constructor-arg value="2"/>
    </bean>
    <!--配置service层的bean-->
    <!--<bean id="accountService" class="service.Impl.accountServiceImpl"></bean>-->

    <!-- 第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）-->
   <bean id="instanceFactory" class="factory.InstanceFactory"></bean>
   <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>


    <!-- 第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)
    <bean id="accountService" class="com.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->

    <!--<bean id="accountService" class="service.Impl.accountServiceImpl"
          scope="singleton" init-method="init" destroy-method="destroy"></bean>-->
    <!--包含bean生命周期，直接使用init-method，destroy-method就展示生命周期-->
    <!-- bean对象的生命周期
            单例对象
                出生：当容器创建时对象出生
                活着：只要容器还在，对象一直活着
                死亡：容器销毁，对象消亡
                总结：单例对象的生命周期和容器相同
            多例对象
                出生：当我们使用对象时spring框架为我们创建
                活着：对象只要是在使用过程中就一直活着。
                死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
     -->
</beans>